// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id       String    @id @default(uuid())
  title    String
  body     String?
  comments Comment[]
  upvotes User[] @relation("upvotes-posts")
  downvotes User[] @relation("downvotes-posts")
  community Community @relation(fields:[communityId], references: [id], onDelete: Cascade)
  communityId String
  user User @relation(fields:[userId], references: [id], onDelete: Cascade) 
  userId String
  image String? @db.VarChar(1048576)
  createdAt DateTime @default(now()) @db.Timestamp
}

model Community{
  id String @id @default(uuid())
  name String @db.VarChar(100) @unique
  communityNameFormat String? @db.VarChar(102) @unique
  tag String
  description String?
  rules String?
  posts Post[] 
  image String?
  iconImage String?
  allowimagesandvideo Boolean @default(false)
  allowlink Boolean @default(false)
  allowpoll Boolean @default(false)
  allowtalk Boolean @default(false)
  visibility visibility @default(public)
  NSFW Boolean @default(false)
  createAt DateTime?
  users User[]

//owner and moderators
  owner User? @relation("owner", fields:[ownerId], references: [id])
  ownerId String?
  moderators User [] @relation("moderator")

  //banner stuff
  bannerColor String?
  bannerImage String? @db.VarChar(1048576)
  bannerImageType String? @default("fill")
  communityBannerSize BannerSize @default(small)

  //theme colors 
  themeBaseColor String @default("33A8FF")
  themeHighlightColor String @default("0079D3")
  themeBodyColor String @default("DAE0E6")

  //favorited by
  favoriteUsers User[] @relation("favorite")//many to many example
}

enum BannerSize{
  small
  medium
  large

}

enum visibility{
  public
  restricted
  private
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String
  name     String  @unique  
  karma Int @default(0)
  photo String?
  comments Comment[]
  communities Community[]
  posts Post[] 
  communityOwner Community[] @relation("owner")
  moderatorCommunities Community [] @relation("moderator")
  favoriteCommunities Community[] @relation("favorite") //many to many example
  createdAt DateTime @default(now()) @db.Timestamp
  followedBy    User[]  @relation("Follower")
  following  User[] @relation("Follower")
  parentId  String?

  //posts
  upvotes Post [] @relation("upvotes-posts")
  downvotes Post [] @relation("downvotes-posts")

  //comments
    upvotesComment Comment [] @relation("upvotes-comment")
  downvotesComment Comment [] @relation("downvotes-comment")
}

model Comment {
  id        String    @id @default(uuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  parentId  String?
  upvotes User [] @relation("upvotes-comment")
  downvotes User [] @relation("downvotes-comment")
  image String? @db.VarChar(1048576)
}

// model Like {
//   user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
//   userId    String
//   commentId String

//   @@id([userId, commentId])
// }

//user User @relation(fields:[userId], references :[id])
